/**
 * @fileoverview Firestore Security Rules for Auto Detail Shop App
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user can only
 * access their own profile and the data (clients, vehicles, service records)
 * associated with their profile.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/clients/{clientId}: Stores client information for a specific user.
 * - /users/{userId}/clients/{clientId}/vehicles/{vehicleId}: Stores vehicles for a specific client.
 * - /users/{userId}/clients/{clientId}/vehicles/{vehicleId}/serviceHistory/{serviceId}: Stores the service history for a specific vehicle.
 *
 * Key Security Decisions:
 * - Users can only list clients under their own user ID.
 * - All data is nested under /users/{userId}, enforcing clear ownership.
 * - The ruleset does not attempt to validate the specific data types of all fields, focusing
 *   instead on authorization and relationship integrity.
 *
 * Denormalization for Authorization:
 *  - The data model inherently uses denormalization. The client, vehicle, and service records
 *    are nested under the user's ID, making the ownership check straightforward.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles.
     * @path /users/{userId}
     * @allow (create) - User can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) - User can only access their own profile.
     * @deny (create) - User cannot create a profile with a userId that doesn't match their auth UID.
     * @deny (get, update, delete) - User cannot access another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isExistingOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.email is string && request.resource.data.name is string;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for clients under a user's profile.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create) - User can create a client under their own profile.
     * @allow (get, list, update, delete) - User can only access clients under their own profile.
     * @deny (create) - User cannot create a client under another user's profile.
     * @deny (get, list, update, delete) - User cannot access clients under another user's profile.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/clients/{clientId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isExistingOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.name is string && request.resource.data.email is string && request.resource.data.createdAt is string;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for vehicles under a client's profile.
     * @path /users/{userId}/clients/{clientId}/vehicles/{vehicleId}
     * @allow (create) - User can create a vehicle under their own client profile.
     * @allow (get, list, update, delete) - User can only access vehicles under their own client profile.
     * @deny (create) - User cannot create a vehicle under another user's client profile.
     * @deny (get, list, update, delete) - User cannot access vehicles under another user's client profile.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/clients/{clientId}/vehicles/{vehicleId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isExistingOwner(userId);
      allow list: if isExistingOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.make is string && request.resource.data.model is string && request.resource.data.year is number;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for service history under a vehicle's profile.
     * @path /users/{userId}/clients/{clientId}/vehicles/{vehicleId}/serviceHistory/{serviceId}
     * @allow (create) - User can create a service record under their own vehicle profile.
     * @allow (get, list, update, delete) - User can only access service records under their own vehicle profile.
     * @deny (create) - User cannot create a service record under another user's vehicle profile.
     * @deny (get, list, update, delete) - User cannot access service records under another user's vehicle profile.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/clients/{clientId}/vehicles/{vehicleId}/serviceHistory/{serviceId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isExistingOwner(userId);
      allow list: if isExistingOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.serviceType is string && request.resource.data.date is string && request.resource.data.cost is number;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}