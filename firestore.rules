/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for all data. Each user can only access their own profile and the data nested under their profile (clients, vehicles, service records).
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only by the user.
 * - /users/{userId}/clients/{clientId}: Client information, accessible only by the user.
 * - /users/{userId}/clients/{clientId}/vehicles/{vehicleId}: Vehicle information, accessible only by the user.
 * - /users/{userId}/clients/{clientId}/vehicles/{vehicleId}/serviceHistory/{serviceId}: Service history information, accessible only by the user.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - All data is private and requires authentication.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information. Only the user can read and write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete): User 'test_user' can access /users/test_user.
     * @deny (get, create, update, delete): User 'test_user' cannot access /users/other_user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to client information for a specific user. Only the user can read and write their clients.
     * @path /users/{userId}/clients/{clientId}
     * @allow (get, create, update, delete): User 'test_user' can access /users/test_user/clients/client1.
     * @deny (get, create, update, delete): User 'test_user' cannot access /users/other_user/clients/client1.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/clients/{clientId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to vehicle information for a specific client. Only the user can read and write their clients' vehicles.
     * @path /users/{userId}/clients/{clientId}/vehicles/{vehicleId}
     * @allow (get, create, update, delete): User 'test_user' can access /users/test_user/clients/client1/vehicles/vehicle1.
     * @deny (get, create, update, delete): User 'test_user' cannot access /users/other_user/clients/client1/vehicles/vehicle1.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/clients/{clientId}/vehicles/{vehicleId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to service history information for a specific vehicle. Only the user can read and write their clients' vehicles' service history.
     * @path /users/{userId}/clients/{clientId}/vehicles/{vehicleId}/serviceHistory/{serviceId}
     * @allow (get, create, update, delete): User 'test_user' can access /users/test_user/clients/client1/vehicles/vehicle1/serviceHistory/service1.
     * @deny (get, create, update, delete): User 'test_user' cannot access /users/other_user/clients/client1/vehicles/vehicle1/serviceHistory/service1.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/clients/{clientId}/vehicles/{vehicleId}/serviceHistory/{serviceId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}