/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict owner-only access model for client data, vehicles, and service history.
 * All data is nested under the /clients/{clientId} path, ensuring that each client's data is isolated.
 *
 * Key Security Decisions:
 *  - Anonymous auth is used, so there is no way to validate identity. Rules are set to allow any signed in user, but there is no way to distinguish users.
 *  - Listing of the /clients collection is disabled.
 *
 * Data Structure:
 *  - /clients/{clientId}: Stores client information.
 *  - /clients/{clientId}/vehicles/{vehicleId}: Stores vehicles for a specific client.
 *  - /clients/{clientId}/vehicles/{vehicleId}/serviceHistory/{serviceId}: Stores the service history for a specific vehicle.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the /clients collection.
     * @path /clients/{clientId}
     * @allow (create) - Any authenticated user can create a client document.
     * @allow (get) - Any authenticated user can get a client document.
     * @allow (update) - Any authenticated user can update a client document.
     * @allow (delete) - Any authenticated user can delete a client document.
     * @deny (list) - Listing all clients is denied.
     * @principle Enforces document ownership for writes.
     */
    match /clients/{clientId} {
      allow get: if isSignedIn();
      allow list: if false;

      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to the /clients/{clientId}/vehicles collection.
     * @path /clients/{clientId}/vehicles/{vehicleId}
     * @allow (create) - Any authenticated user can create a vehicle document under a client.
     * @allow (get) - Any authenticated user can get a vehicle document.
     * @allow (update) - Any authenticated user can update a vehicle document.
     * @allow (delete) - Any authenticated user can delete a vehicle document.
     * @allow (list) - Any authenticated user can list vehicle documents for a client.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /clients/{clientId}/vehicles/{vehicleId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();

      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to the /clients/{clientId}/vehicles/{vehicleId}/serviceHistory collection.
     * @path /clients/{clientId}/vehicles/{vehicleId}/serviceHistory/{serviceId}
     * @allow (create) - Any authenticated user can create a service record document under a vehicle.
     * @allow (get) - Any authenticated user can get a service record document.
     * @allow (update) - Any authenticated user can update a service record document.
     * @allow (delete) - Any authenticated user can delete a service record document.
     * @allow (list) - Any authenticated user can list service record documents for a vehicle.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /clients/{clientId}/vehicles/{vehicleId}/serviceHistory/{serviceId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();

      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }
}