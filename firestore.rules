/**
 * @file Firestore Security Rules
 * @description This ruleset allows public read access to the 'clients' collection and its subcollections, but restricts write access to only authenticated users, effectively creating an anonymous read with authenticated write access pattern.
 *
 * Data Structure:
 * - /clients/{clientId}: Stores client information. Publicly readable.
 * - /clients/{clientId}/vehicles/{vehicleId}: Stores vehicle information for a specific client. Publicly readable.
 * - /clients/{clientId}/vehicles/{vehicleId}/serviceHistory/{serviceId}: Stores service history for a specific vehicle. Publicly readable.
 *
 * Key Security Decisions:
 * - Public read access to all data, including client, vehicle, and service history.
 * - Authenticated-only write access for all data, preventing unauthorized modifications.
 * - Write operations on 'clients' and subcollections are denied for unauthenticated users.
 * - No validation is performed on data shapes beyond requiring authentication for writes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to client information, but restricts write access to authenticated users only.
     * @path /clients/{clientId}
     * @allow (get, list) if true - Allows any user to read client data.
     * @allow (create) if isSignedIn() - Allows only authenticated users to create client data.
     * @deny (create) if !isSignedIn() - Denies unauthenticated users from creating client data.
     * @allow (update) if isSignedIn() - Allows only authenticated users to update client data.
     * @deny (update) if !isSignedIn() - Denies unauthenticated users from updating client data.
     * @allow (delete) if isSignedIn() - Allows only authenticated users to delete client data.
     * @deny (delete) if !isSignedIn() - Denies unauthenticated users from deleting client data.
     * @principle Public read, authenticated write access for clients.
     */
    match /clients/{clientId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access to vehicle information for a specific client, but restricts write access to authenticated users only.
     * @path /clients/{clientId}/vehicles/{vehicleId}
     * @allow (get, list) if true - Allows any user to read vehicle data.
     * @allow (create) if isSignedIn() - Allows only authenticated users to create vehicle data.
     * @deny (create) if !isSignedIn() - Denies unauthenticated users from creating vehicle data.
     * @allow (update) if isSignedIn() - Allows only authenticated users to update vehicle data.
     * @deny (update) if !isSignedIn() - Denies unauthenticated users from updating vehicle data.
     * @allow (delete) if isSignedIn() - Allows only authenticated users to delete vehicle data.
     * @deny (delete) if !isSignedIn() - Denies unauthenticated users from deleting client data.
     * @principle Public read, authenticated write access for vehicles.
     */
    match /clients/{clientId}/vehicles/{vehicleId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access to service history for a specific vehicle, but restricts write access to authenticated users only.
     * @path /clients/{clientId}/vehicles/{vehicleId}/serviceHistory/{serviceId}
     * @allow (get, list) if true - Allows any user to read service history data.
     * @allow (create) if isSignedIn() - Allows only authenticated users to create service history data.
     * @deny (create) if !isSignedIn() - Denies unauthenticated users from creating service history data.
     * @allow (update) if isSignedIn() - Allows only authenticated users to update service history data.
     * @deny (update) if !isSignedIn() - Denies unauthenticated users from updating service history data.
     * @allow (delete) if isSignedIn() - Allows only authenticated users to delete service history data.
     * @deny (delete) if !isSignedIn() - Denies unauthenticated users from deleting client data.
     * @principle Public read, authenticated write access for service history.
     */
    match /clients/{clientId}/vehicles/{vehicleId}/serviceHistory/{serviceId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }

  // Helper function to determine if a user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }
}