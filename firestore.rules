/**
 * @file Firestore Security Rules
 * @description This ruleset allows public read access to the 'clients' collection and its subcollections, but restricts write access to authenticated users.
 *
 * Core Philosophy:
 * The ruleset prioritizes ease of use for prototyping. It allows public read access for all clients, vehicles, and service records. Write access, however, requires the user to be authenticated (signed in). This is sufficient to prevent anonymous data modification while still allowing unauthenticated users to browse the data.
 *
 * Data Structure:
 * The data is organized hierarchically: /clients/{clientId}/vehicles/{vehicleId}/serviceHistory/{serviceId}
 *
 * Key Security Decisions:
 * - Public Read Access: The `get` and `list` operations are open to all users, including unauthenticated users.
 * - Authenticated Writes: `create`, `update`, and `delete` operations require authentication.
 * - No Data Validation: Data validation is omitted in this prototyping phase for rapid iteration.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to the 'clients' collection, but requires authentication for write access.
     * @path /clients/{clientId}
     * @allow (get, list) - Any user can read client data.
     * @allow (create, update, delete) - An authenticated user can modify client data.
     * @deny (create, update, delete) - An unauthenticated user cannot modify client data.
     * @principle Allows public read access with authenticated writes for clients
     */
    match /clients/{clientId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to the 'vehicles' subcollection, but requires authentication for write access.
     * @path /clients/{clientId}/vehicles/{vehicleId}
     * @allow (get, list) - Any user can read vehicle data.
     * @allow (create, update, delete) - An authenticated user can modify vehicle data.
     * @deny (create, update, delete) - An unauthenticated user cannot modify vehicle data.
     * @principle Allows public read access with authenticated writes for vehicles
     */
    match /clients/{clientId}/vehicles/{vehicleId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to the 'serviceHistory' subcollection, but requires authentication for write access.
     * @path /clients/{clientId}/vehicles/{vehicleId}/serviceHistory/{serviceId}
     * @allow (get, list) - Any user can read service history data.
     * @allow (create, update, delete) - An authenticated user can modify service history data.
     * @deny (create, update, delete) - An unauthenticated user cannot modify service history data.
     * @principle Allows public read access with authenticated writes for service history
     */
    match /clients/{clientId}/vehicles/{vehicleId}/serviceHistory/{serviceId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    // Helper function to check if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }
  }
}