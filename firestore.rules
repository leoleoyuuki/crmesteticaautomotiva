/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description
 * This ruleset enforces a strict user-ownership model for clients, vehicles, and service records.
 * Anonymous authentication is enabled, and each client is considered the owner of their data.
 *
 * Data Structure:
 * - /clients/{clientId}: Stores client information.  `clientId` is the Firebase Auth UID for anonymous users.
 * - /clients/{clientId}/vehicles/{vehicleId}: Stores vehicles owned by the client.
 * - /clients/{clientId}/vehicles/{vehicleId}/serviceHistory/{serviceId}: Stores service records for a specific vehicle.
 *
 * Key Security Decisions:
 * - Clients can only access their own data (clients, vehicles, service records).
 * - Listing all clients or vehicles is not allowed to prevent data scraping.
 * - Data shape is not heavily validated to allow for rapid prototyping.
 * - An anonymous user "owns" any resources created with their `uid`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the /clients collection, ensuring only the client can read or write their own document.
     * @path /clients/{clientId}
     * @allow (create, get, update, delete) User with UID 'clientId' can create, read, update, or delete their own client document.
     * @deny (create, get, update, delete) User with UID other than 'clientId' cannot create, read, update, or delete this client document.
     * @principle Enforces document ownership for all operations.
     */
    match /clients/{clientId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the existing owner of the document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the client to read their own document.
      allow get: if isOwner(clientId);

      // Prevent listing all clients.
      allow list: if false;

      // Allow the client to create their own document, enforcing that the document ID matches their UID.
      allow create: if isOwner(clientId);

      // Allow the client to update their own document if it exists.
      allow update: if isExistingOwner(clientId);

      // Allow the client to delete their own document if it exists.
      allow delete: if isExistingOwner(clientId);

       /**
       * @description Secures the /clients/{clientId}/vehicles collection, ensuring only the client can manage their own vehicles.
       * @path /clients/{clientId}/vehicles/{vehicleId}
       * @allow (create, get, update, delete) User with UID 'clientId' can create, read, update, or delete vehicle documents under their client document.
       * @deny (create, get, update, delete) User with UID other than 'clientId' cannot access these vehicle documents.
       * @principle Restricts access to a user's own data tree.
       */
      match /vehicles/{vehicleId} {

        // Helper function to check if the authenticated user is the owner of the parent client document.
        function isClientOwner(clientId) {
          return isSignedIn() && request.auth.uid == clientId;
        }

        // Helper function to check if the authenticated user is the existing owner of the parent client document.
        function isExistingClientOwner(clientId) {
          return isClientOwner(clientId) && resource != null;
        }

        // Allow the client to read their own vehicle documents.
        allow get: if isClientOwner(clientId);

        // Prevent listing all vehicle documents directly.
        allow list: if isClientOwner(clientId);

        // Allow the client to create vehicle documents under their client document.
        allow create: if isClientOwner(clientId);

        // Allow the client to update vehicle documents under their client document if it exists.
        allow update: if isExistingClientOwner(clientId);

        // Allow the client to delete vehicle documents under their client document if it exists.
        allow delete: if isExistingClientOwner(clientId);

        /**
         * @description Secures the /clients/{clientId}/vehicles/{vehicleId}/serviceHistory collection, ensuring only the client can manage their vehicle service records.
         * @path /clients/{clientId}/vehicles/{vehicleId}/serviceHistory/{serviceId}
         * @allow (create, get, update, delete) User with UID 'clientId' can create, read, update, or delete service record documents under their vehicle document.
         * @deny (create, get, update, delete) User with UID other than 'clientId' cannot access these service record documents.
         * @principle Restricts access to a user's own data tree.
         */
        match /serviceHistory/{serviceId} {

          // Helper function to check if the authenticated user is the owner of the grandparent client document.
          function isClientOwner(clientId) {
            return isSignedIn() && request.auth.uid == clientId;
          }

          // Helper function to check if the authenticated user is the existing owner of the grandparent client document.
          function isExistingClientOwner(clientId) {
            return isClientOwner(clientId) && resource != null;
          }

          // Allow the client to read their own service record documents.
          allow get: if isClientOwner(clientId);

          // Prevent listing all service record documents directly.
          allow list: if isClientOwner(clientId);

          // Allow the client to create service record documents under their vehicle document.
          allow create: if isClientOwner(clientId);

          // Allow the client to update service record documents under their vehicle document if it exists.
          allow update: if isExistingClientOwner(clientId);

          // Allow the client to delete service record documents under their vehicle document if it exists.
          allow delete: if isExistingClientOwner(clientId);
        }
      }
    }
  }
}