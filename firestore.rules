/**
 * @fileOverview Firestore Security Rules for Auto Detailing Shop.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model. Each client document and its associated
 * vehicles and service records are owned by the authenticated user who created them.
 *
 * Data Structure:
 * Data is structured hierarchically under the following paths:
 * /clients/{clientId}
 * /clients/{clientId}/vehicles/{vehicleId}
 * /clients/{clientId}/vehicles/{vehicleId}/serviceHistory/{serviceId}
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own client documents and associated data.
 * - Data validation is relaxed during this prototyping phase, focusing on ownership and relationships.
 *
 * Denormalization for Authorization:
 * - The client ID is used in the path for vehicles and service records to establish ownership, avoiding the need for `get()` calls to verify client ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to client documents.
     * @path /clients/{clientId}
     * @allow (create) - Authenticated user creates a client document where the clientId matches their UID.
     * @allow (get, list, update, delete) - Authenticated user reads, updates, or deletes a client document where the clientId matches their UID.
     * @deny (create) - Unauthenticated user attempts to create a client document.
     * @deny (update) - Authenticated user attempts to update a client document where the clientId does not match their UID.
     * @principle Enforces document ownership for all operations.
     */
    match /clients/{clientId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(clientId) {
        return request.auth.uid == clientId;
      }

      function isExistingOwner(clientId) {
          return isOwner(clientId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isOwner(clientId);
      allow update: if isExistingOwner(clientId);
      allow delete: if isExistingOwner(clientId);
    }

    /**
     * @description Controls access to vehicle documents for a specific client.
     * @path /clients/{clientId}/vehicles/{vehicleId}
     * @allow (create) - Authenticated user creates a vehicle document under their client document.
     * @allow (get, list, update, delete) - Authenticated user reads, updates, or deletes a vehicle document under their client document.
     * @deny (create) - Unauthenticated user attempts to create a vehicle document.
     * @deny (update) - Authenticated user attempts to update a vehicle document under a client document they don't own.
     * @principle Enforces document ownership and prevents unauthorized modifications.
     */
    match /clients/{clientId}/vehicles/{vehicleId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(clientId) {
        return request.auth.uid == clientId;
      }

      function isExistingOwner(clientId) {
        return isOwner(clientId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(clientId);
      allow list: if isSignedIn() && isOwner(clientId);
      allow create: if isSignedIn() && isOwner(clientId);
      allow update: if isExistingOwner(clientId);
      allow delete: if isExistingOwner(clientId);
    }

    /**
     * @description Controls access to service history documents for a specific vehicle.
     * @path /clients/{clientId}/vehicles/{vehicleId}/serviceHistory/{serviceId}
     * @allow (create) - Authenticated user creates a service record document under their client and vehicle documents.
     * @allow (get, list, update, delete) - Authenticated user reads, updates, or deletes a service record document under their client and vehicle documents.
     * @deny (create) - Unauthenticated user attempts to create a service record document.
     * @deny (update) - Authenticated user attempts to update a service record document under client or vehicle document they don't own.
     * @principle Enforces document ownership and prevents unauthorized modifications.
     */
    match /clients/{clientId}/vehicles/{vehicleId}/serviceHistory/{serviceId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(clientId) {
        return request.auth.uid == clientId;
      }

      function isExistingOwner(clientId) {
        return isOwner(clientId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(clientId);
      allow list: if isSignedIn() && isOwner(clientId);
      allow create: if isSignedIn() && isOwner(clientId);
      allow update: if isExistingOwner(clientId);
      allow delete: if isExistingOwner(clientId);
    }
  }
}