/**
 * @fileoverview Firestore Security Rules for Auto Detailing Shop App
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has full control over their
 * own data, and no user can access another user's data. All data is nested under the /users/{userId}
 * collection.
 *
 * Data Structure:
 * The Firestore database is structured as follows:
 * /users/{userId} - User profile information
 * /users/{userId}/clients/{clientId} - Client information for a user
 * /users/{userId}/clients/{clientId}/vehicles/{vehicleId} - Vehicles owned by a client
 * /users/{userId}/clients/{clientId}/vehicles/{vehicleId}/serviceHistory/{serviceId} - Service history for a vehicle
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Users cannot list other users' profiles.
 * - No data validation is performed beyond ownership checks, allowing for flexible data shapes during prototyping.
 *
 * Denormalization for Authorization:
 *  - The data is structured to avoid the need for complex queries or multiple `get()` calls within the rules.
 *  Ownership is determined by the path; therefore, read and write access is granted to the user matching the `userId` in the path.
 *
 * Structural Segregation:
 *  - All user-specific data is stored under the `/users/{userId}` path, ensuring private data is kept separate.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) User with ID 'user123' can read/write their profile.
     * @deny (get, create, update, delete) User with ID 'user456' cannot read/write 'user123' profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows users to manage their clients.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create) User with ID 'user123' can create a client under their profile.
     * @allow (get, update, delete) User with ID 'user123' can read/write/delete a client under their profile.
     * @deny (create, get, update, delete) User with ID 'user456' cannot manage 'user123' clients.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/clients/{clientId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows users to manage vehicles for their clients.
     * @path /users/{userId}/clients/{clientId}/vehicles/{vehicleId}
     * @allow (create) User with ID 'user123' can create a vehicle for their client.
     * @allow (get, update, delete) User with ID 'user123' can read/write/delete a vehicle for their client.
     * @deny (create, get, update, delete) User with ID 'user456' cannot manage vehicles for 'user123' clients.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/clients/{clientId}/vehicles/{vehicleId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows users to manage the service history for a specific vehicle.
     * @path /users/{userId}/clients/{clientId}/vehicles/{vehicleId}/serviceHistory/{serviceId}
     * @allow (create) User with ID 'user123' can create a service record for a vehicle.
     * @allow (get, update, delete) User with ID 'user123' can read/write/delete a service record for a vehicle.
     * @deny (create, get, update, delete) User with ID 'user456' cannot manage service history for 'user123' clients' vehicles.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/clients/{clientId}/vehicles/{vehicleId}/serviceHistory/{serviceId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}