/**
 * @fileoverview Firestore Security Rules for Auto Detail Shop App
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model where each user can only
 * access their own data. This includes profile information, clients, vehicles,
 * and service history.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, creating a clear hierarchy.
 * - /users/{userId}: User profile data.
 * - /users/{userId}/clients/{clientId}: Client data for a specific user.
 * - /users/{userId}/clients/{clientId}/vehicles/{vehicleId}: Vehicle data for a client.
 * - /users/{userId}/clients/{clientId}/vehicles/{vehicleId}/serviceHistory/{serviceId}: Service history for a vehicle.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Only authenticated users can access data.
 * - All data is private and user-specific.
 *
 * Denormalization for Authorization:
 *  None
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profile data. Only the owner can read and write their profile.
     * @path /users/{userId}
     * @allow (get, update, delete) auth.uid == userId
     * @allow (create) auth.uid == userId
     * @allow (list) false
     * @deny (get) true if auth.uid != userId
     * @deny (create) true if auth.uid != userId
     * @deny (update) true if auth.uid != userId
     * @deny (delete) true if auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Read rules
      allow get: if isOwner(userId);
      allow list: if false; // Disallow listing of all users

      // Write rules
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure client data for a specific user. Only the owner can read and write their clients.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create) auth.uid == userId
     * @allow (get, update, delete, list) auth.uid == userId
     * @deny (create) true if auth.uid != userId
     * @deny (get) true if auth.uid != userId
     * @deny (update) true if auth.uid != userId
     * @deny (delete) true if auth.uid != userId
     * @deny (list) true if auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/clients/{clientId} {
      // Read rules
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write rules
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure vehicle data for a specific client. Only the owner can read and write their vehicles.
     * @path /users/{userId}/clients/{clientId}/vehicles/{vehicleId}
     * @allow (create) auth.uid == userId
     * @allow (get, update, delete, list) auth.uid == userId
     * @deny (create) true if auth.uid != userId
     * @deny (get) true if auth.uid != userId
     * @deny (update) true if auth.uid != userId
     * @deny (delete) true if auth.uid != userId
     * @deny (list) true if auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/clients/{clientId}/vehicles/{vehicleId} {
      // Read rules
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write rules
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure service history data for a specific vehicle. Only the owner can read and write their service history.
     * @path /users/{userId}/clients/{clientId}/vehicles/{vehicleId}/serviceHistory/{serviceId}
     * @allow (create) auth.uid == userId
     * @allow (get, update, delete, list) auth.uid == userId
     * @deny (create) true if auth.uid != userId
     * @deny (get) true if auth.uid != userId
     * @deny (update) true if auth.uid != userId
     * @deny (delete) true if auth.uid != userId
     * @deny (list) true if auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/clients/{clientId}/vehicles/{vehicleId}/serviceHistory/{serviceId} {
      // Read rules
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write rules
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}